#!/bin/bash
set -e

cmd="$1"

if test ! "$cmd"; then
    echo "command required."
    echo
    echo "available commands:"
    # alphabetical order
    echo "  build-all    build project from scratch"
    echo "  build        build project"
    echo "  clean        deletes all generated files"
    echo "  coverage     run tests, then show coverage report"
    echo "  lint         run code linter"
    echo "  release      build project for distribution"
    echo "  test         run tests"
    echo "  update-deps  update project dependencies"
    exit 1
fi

shift
rest=$*

if test "$cmd" = "clean"; then
    # files
    tbd=(
        "bw"
        "linux-amd64" "linux-amd64.sha256" # generated by 'release'
    )
    for fname in "${tbd[@]}"; do
        if [ -f "$fname" ]; then
            rm -f "$fname"
            echo "deleted file '$fname'"
        fi
    done

    # dirs
    tbd=(
        
    )
    for dirname in "${tbd[@]}"; do
        if [ -d "$dirname" ]; then
            rm -rf "$dirname"
            echo "deleted directory '$dirname'"
        fi
    done
    exit 0

elif test "$cmd" = "build-all"; then
    # CGO_ENABLED=0 skips CGO and linking against glibc to build static binaries.
    # -a 'build all'
    # -v 'verbose'
    ./manage.sh clean
    go build \
        -a \
        -v
    exit 0

elif test "$cmd" = "build"; then
    ./manage.sh clean
    # CGO_ENABLED=0 skips CGO and linking against glibc to build static binaries.
    # -v 'verbose'
    go build \
        -v
    echo "wrote bw"
    exit 0

elif test "$cmd" = "release"; then
    # GOOS is 'Go OS' and is being explicit in which OS to build for.
    # CGO_ENABLED=0 skips CGO and linking against glibc to build static binaries.
    # ld -s is 'disable symbol table'
    # ld -w is 'disable DWARF generation'
    # -trimpath removes leading paths to source files
    # -v 'verbose'
    # -o 'output'
    ./manage.sh clean
    GOOS=linux go build \
        -ldflags="-s -w" \
        -trimpath \
        -v \
        -o linux-amd64
    sha256sum linux-amd64 > linux-amd64.sha256
    echo "wrote linux-amd64"
    echo "wrote linux-amd64.sha256"
    exit 0

elif test "$cmd" = "test"; then
    # CGO_ENABLED=0 skips CGO and linking against glibc to build static binaries.
    # -v verbose
    go test \
        -v \
        ./...
    exit 0

elif test "$cmd" = "coverage"; then
    # CGO_ENABLED=0 skips CGO and linking against glibc to build static binaries.
    # -cover 'enable coverage analysis'
    # -coverprofile 'write a coverage profile to the file'
    go test \
        -cover \
        -coverprofile=coverage.out \
        ./...
    # -html 'generate HTML representation of coverage profile'
    # -o 'file for output'
    go tool cover -html=coverage.out -o coverage.html
    # -func 'output coverage profile information for each function'
    go tool cover -func=coverage.out
    echo "wrote coverage.out"
    echo "wrote coverage.html"
    exit 0

elif test "$cmd" = "update-deps"; then
    # -u 'update modules [...] to use newer minor or patch releases when available'
    go get -u
    go mod tidy
    ./manage.sh build
    exit 0

# ...

fi

echo "unknown command: $cmd"
exit 1
