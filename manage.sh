#!/bin/bash
set -eu

cmd=${1:-}

if test ! "$cmd"; then
    echo "command required"
    echo
    echo "available commands:"
    # alphabetical order
    echo "  build-all    build project from scratch"
    echo "  build        build project"
    echo "  clean        deletes all generated files"
    echo "  coverage     run tests, then show coverage report"
    echo "  fixtures     build/regenerate test fixtures"
    echo "  lint         run code linter"
    echo "  release      build project for distribution"
    echo "  test         run tests"
    echo "  update-deps  update project dependencies"
    exit 1
fi

shift
rest=$*

if test "$cmd" = ""; then
    exit 1

elif test "$cmd" = "build-all"; then
    # CGO_ENABLED=0 skips CGO and linking against glibc to build static binaries.
    # -a 'build all'
    # -v 'verbose'
    ./manage.sh clean
    go build \
        -C strongbox \
        -a \
        -v
    echo "wrote ./strongbox/strongbox"
    exit 0

elif test "$cmd" = "build"; then
    ./manage.sh clean
    # CGO_ENABLED=0 skips CGO and linking against glibc to build static binaries.
    # -C Change to dir before running the command.
    # -v 'verbose'
    go build \
        -C strongbox \
        -v
    echo "wrote ./strongbox/strongbox"
    exit 0

elif test "$cmd" = "clean"; then
    # files
    tbd=(
        "strongbox/linux-amd64" "strongbox/linux-amd64.sha256" # generated by 'release'
        "strongbox/strongbox" "strongbox/linux-amd64.sha256" # generated by 'build'
        "bw/coverage.out" "bw/coverage.html" "strongbox/coverage.out" "strongbox/coverage.html" # generated by 'coverage'
        "coverage" "coverage.html"
    )
    for fname in "${tbd[@]}"; do
        if [ -f "$fname" ]; then
            rm -f "$fname"
            echo "deleted file '$fname'"
        fi
    done

    # dirs
    tbd=(
        "unit" # generated by 'coverage'
    )
    for dirname in "${tbd[@]}"; do
        if [ -d "$dirname" ]; then
            rm -rf "$dirname"
            echo "deleted directory '$dirname'"
        fi
    done
    exit 0

elif test "$cmd" = "coverage"; then
    mkdir -p ./unit
    # -cover 'enable coverage analysis'
    # -timeout=5s 'individual tests have 5s to complete'
    # -args -test.gocoverdir= 'write binary coverage data to this dir'
    go test -timeout=5s -cover ./strongbox/... -args -test.gocoverdir="$PWD/unit"
    go test -timeout=5s -cover ./bw/... -args -test.gocoverdir="$PWD/unit"
    # convert coverage data in 'unit' dir to a textual format
    go tool covdata textfmt -i=unit/ -o coverage
    # generate a html report from textual coverage data
    go tool cover -html=coverage -o coverage.html
    echo "wrote ./unit"
    echo "wrote ./coverage"
    echo "wrote ./coverage.html"
    exit 0

elif test "$cmd" = "fixtures"; then
    # generate zip files
    (
        cd strongbox/src/testdata/zipfiles
        rm -f ./*.zip
	# lol: https://stackoverflow.com/questions/3774278/extracting-a-7-zip-file-silently-command-line-option#answer-11629736
	# 'a' add files to archive
	# '-tzip' is '-t{Type}'
	# '-w' set cwd
        7z a -tzip everyaddon--1-2-3.zip -w everyaddon--1-2-3/. | grep 'ing archive'
        7z a -tzip everyaddon--1-2-4.zip -w everyaddon--1-2-4/. | grep 'ing archive'
        7z a -tzip everyaddon--7-8-9.zip -w everyaddon--7-8-9/. | grep 'ing archive'
    )
    exit 0

elif test "$cmd" = "lint"; then
    # go install github.com/mgechev/revive@latest
    revive --formatter json ./bw/... ./strongbox/...
    exit 0

elif test "$cmd" = "release"; then
    # GOOS is 'Go OS' and is being explicit in which OS to build for.
    # CGO_ENABLED=0 skips CGO and linking against glibc to build static binaries.
    # ld -s is 'disable symbol table'
    # ld -w is 'disable DWARF generation'
    # -trimpath removes leading paths to source files
    # -v 'verbose'
    # -o 'output'
    ./manage.sh clean
    GOOS=linux go build \
        -C strongbox \
        -ldflags="-s -w" \
        -trimpath \
        -v \
        -o linux-amd64
    sha256sum strongbox/linux-amd64 > strongbox/linux-amd64.sha256
    echo "wrote linux-amd64"
    echo "wrote linux-amd64.sha256"
    exit 0

elif test "$cmd" = "test"; then
    # CGO_ENABLED=0 skips CGO and linking against glibc to build static binaries.
    # -v verbose
    # -timeout=5s 'individual tests have 5s to complete'
    (
        cd strongbox
        go test \
            -v \
            -timeout=5s \
            ./...
    )
    (
        cd bw
        go test \
            -v \
            -timeout=5s \
            ./...
    )
    exit 0


elif test "$cmd" = "update-deps"; then
    # -u 'update modules [...] to use newer minor or patch releases when available'
    (
        cd strongbox
        go get -u
        go mod tidy
    )
    (
        cd bw
        go get -u
        go mod tidy
    )
    ./manage.sh build
    exit 0

# ...

fi

echo "unknown command: $cmd"
exit 1
