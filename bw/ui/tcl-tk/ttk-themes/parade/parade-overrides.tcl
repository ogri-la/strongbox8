# Parade Theme Overrides
# This file contains user customizations that override the base parade theme
# Generated by the live theme property editor

namespace eval ttk::theme::parade::overrides {

    # Override storage - maps style.option to custom value
    variable overrides
    array set overrides {}

    # Apply all stored overrides to the current theme
    proc apply_overrides {} {
        variable overrides

        foreach {key value} [array get overrides] {
            set parts [split $key "."]
            if {[llength $parts] == 2} {
                set style [lindex $parts 0]
                set option [lindex $parts 1]

                # Apply the override using ttk::style configure
                ttk::style configure $style $option $value
            }
        }
    }

    # Set an override value for a style option
    proc set_override {style option value} {
        variable overrides
        set key "$style.$option"
        set overrides($key) $value

        # Apply immediately
        ttk::style configure $style $option $value
    }

    # Remove an override (revert to base theme default)
    proc remove_override {style option} {
        variable overrides
        set key "$style.$option"

        if {[info exists overrides($key)]} {
            unset overrides($key)

            # To properly revert, we need to reload the theme
            # Save current theme name
            set current_theme [ttk::style theme use]

            # Temporarily switch to another theme and back to reset styles
            if {$current_theme eq "parade"} {
                ttk::style theme use clam
                ttk::style theme use parade

                # Reapply remaining overrides
                apply_overrides
            }
        }
    }

    # Clear all overrides and revert to base theme
    proc clear_all_overrides {} {
        variable overrides
        array unset overrides

        # Reload the theme to reset to defaults
        set current_theme [ttk::style theme use]
        if {$current_theme eq "parade"} {
            ttk::style theme use clam
            ttk::style theme use parade
        }
    }

    # Get current override value, or empty string if not overridden
    proc get_override {style option} {
        variable overrides
        set key "$style.$option"

        if {[info exists overrides($key)]} {
            return $overrides($key)
        }
        return ""
    }

    # Save all overrides to this file
    proc save_overrides {} {
        variable overrides

        set script_path [info script]
        if {$script_path eq ""} {
            # Fallback path construction
            set script_path [file join [file dirname [info script]] parade-overrides.tcl]
        }

        # Read current file to preserve header
        set header_lines {}
        if {[file exists $script_path]} {
            set f [open $script_path r]
            while {[gets $f line] >= 0} {
                if {[string match "*# END HEADER*" $line]} {
                    lappend header_lines $line
                    break
                }
                lappend header_lines $line
            }
            close $f
        }

        # Write header + overrides
        set f [open $script_path w]

        # Write preserved header or default header
        if {[llength $header_lines] == 0} {
            puts $f "# Parade Theme Overrides"
            puts $f "# This file contains user customizations that override the base parade theme"
            puts $f "# Generated by the live theme property editor"
            puts $f ""
            puts $f "namespace eval ttk::theme::parade::overrides {"
            puts $f "    variable overrides"
            puts $f "    # END HEADER"
        } else {
            foreach line $header_lines {
                puts $f $line
            }
        }

        puts $f ""
        puts $f "    # Generated overrides - do not edit manually"
        puts $f "    array set overrides {"

        foreach {key value} [array get overrides] {
            # Escape the value properly for Tcl
            set escaped_value [list $value]
            puts $f "        $key $escaped_value"
        }

        puts $f "    }"
        puts $f ""
        puts $f "    # Apply overrides when this file is sourced"
        puts $f "    apply_overrides"
        puts $f "}"

        close $f
    }

    # Load overrides from saved values (called when file is sourced)
    proc load_overrides {} {
        variable overrides
        apply_overrides
    }
}

# Auto-apply when sourced
ttk::theme::parade::overrides::load_overrides